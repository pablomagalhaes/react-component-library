{"version":3,"file":"index.es.js","sources":["../src/components/PureTable/scrollbarWidth.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/components/PureTable/NewTable.tsx","../src/components/PureTable/PureTable.tsx","../src/components/Button/Button.tsx","../src/components/TestComponent/TestComponent.tsx"],"sourcesContent":["const scrollbarWidth = () => {\n    // thanks too https://davidwalsh.name/detect-scrollbar-width\n    const scrollDiv = document.createElement('div')\n    scrollDiv.setAttribute('style', 'width: 100px; height: 100px; overflow: scroll; position:absolute; top:-9999px;')\n    document.body.appendChild(scrollDiv)\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    document.body.removeChild(scrollDiv)\n    return scrollbarWidth\n}\n  \nexport default scrollbarWidth","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useRef,useState, useEffect, useMemo, useCallback } from \"react\";\n\nimport { Button } from \"reactstrap\";\nimport { CornerUpLeft, Download } from \"react-feather\";\nimport { useTable, useAbsoluteLayout, useBlockLayout, TableInstance, TableOptions, Column,  } from \"react-table\";\n\n// import { exportToExcel, getColumns, getRows } from \"./excelExport\";\nimport { FixedSizeList } from 'react-window'\nimport scrollbarWidth from \"./scrollbarWidth\";\n\nimport \"./style.scss\";\n\nexport interface NewTableProps {\n    columns?: Array<Object>;\n    data?: Array<Object>;\n    // updateMyData?: ([]: any[]) => void;\n    exportExcel?: boolean;\n    fileName?: string;\n    resetData?: ()=> void;\n    undoData?: ()=> void;\n    saveChanges?: ()=> void;\n  }\n\nconst NewTable = ({ columns, data, exportExcel = false, fileName, resetData, undoData, saveChanges } : NewTableProps ) => {\n\n  // Create an editable cell renderer\n\n  const EditableCell = ({\n     // @ts-ignore\n    value: initialValue,\n     // @ts-ignore\n    row: { index },\n     // @ts-ignore\n    column: { id },\n    // updateMyData, // This is a custom function that we supplied to our table instance\n  }) => {\n\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e: { target: { value: any; }; }) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n    //   updateMyData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n    if(id === 'MD'){\n      return <input value={value}  onChange={onChange} onBlur={onBlur} className='frozen' readOnly />\n    }else{\n      return <input value={value}  onChange={onChange} onBlur={onBlur} />\n    }\n    // return <input value={value}  onChange={onChange} onBlur={onBlur} />\n  }\n\n\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const scrollBarSize = useMemo(() => scrollbarWidth(), [])\n\n  const options: TableOptions<{ col1: string; col2: string }> = {\n    // @ts-ignore\n    data,\n    // @ts-ignore\n    columns\n  };\n\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow\n  } = useTable({ \n    // @ts-ignore\n    columns, \n    // @ts-ignore\n    data, \n    defaultColumn\n    // updateMyData \n    }, useBlockLayout);\n\n\n  const tHeadRef = useRef();\n  const tBodyRef = useRef();\n\n//   const doExportToExcel = useCallback(() => {\n//     const resultColumns = getColumns(columns, defaultColumn);\n//     const resultRows = getRows(rows, resultColumns);\n\n//     console.log('resultColumns', resultColumns);\n//     console.log('resultRows', resultRows);\n\n//     return exportToExcel(\n//       {\n//         sheet: {\n//           sheetName: fileName || \"Excel Export\",\n//           columns: resultColumns,\n//           rows: resultRows,\n//         },\n//       },\n//       `${fileName || \"Excel_Export\"}_${new Date().toLocaleDateString()}`,\n//     );\n//   }, [fileName, columns, defaultColumn, rows]);\n\n\n  const RenderRow = useCallback(\n    // @ts-ignore\n    ({ index, style }) => {\n      const row = rows[index]\n      prepareRow(row)\n      return (\n        <div\n          {...row.getRowProps({\n            style,\n          })}\n          className=\"tr\"\n        >\n          {row.cells.map((cell, ind) => {\n            return (\n              <div \n              // {...cell.getCellProps()}\n              // @ts-ignore\n              {...cell.getCellProps({\n                // @ts-ignore\n                className: `td ${cell.column.className}`\n              })}\n              // className=\"td\"\n              >\n                {cell.render('Cell')}\n              </div>\n            )\n          })}\n        </div>\n      )\n    },\n    [prepareRow, rows]\n  )\n  // const RenderRow = useCallback(\n  //   ({ index, style }) => {\n  //     const row = rows[index]\n  //     prepareRow(row)\n  //     return (\n  //       <tr {...row.getRowProps()}>\n  //         {row.cells.map((cell) => {\n  //           return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n  //         })}\n  //       </tr>\n  //     )\n  //   },\n  //   [prepareRow, rows]\n  // )\n\n\n  const react_table = useRef();\n\n    return (\n        <>\n            <Button\n            color=\"primary\"\n            onClick={undoData}\n            size=\"md\"\n            className=\"shadow-sm mr-1\"\n            data-tip\n            data-for=\"UndoTip\"\n            >\n            <CornerUpLeft\n            className=\"feather\"\n            size={30}\n            style={{ marginTop: \"-5px\" }}\n            />\n            <span style={{ padding: \"5px\" }}>Undo</span>\n            </Button>\n            <Button\n            color=\"primary\"\n            onClick={saveChanges}\n            data-tip\n            data-for=\"SaveChangeTip\"\n            className=\"shadow-sm mr-1\"\n            >\n            {/* <Filter className=\"feather\" /> */}\n            Save Changes\n            </Button>\n            <Button\n            color=\"primary\"\n            onClick={resetData}\n            data-tip\n            data-for=\"ResetTableTip\"\n            className=\"shadow-sm mr-1\"\n            >\n            {/* <RefreshCw className=\"feather\" /> */}\n            Reset\n            </Button>\n            {exportExcel &&\n            (\n                <> \n                <Button\n                    color=\"primary\"\n                    // onClick={doExportToExcel}\n                    data-tip\n                    data-for=\"ExcelTableTip\"\n                    className=\"shadow-sm\"\n                >\n                    <Download\n                    className=\"feather\"\n                    size={30}\n                    style={{ marginTop: \"-5px\" }}\n                    />\n                    <span style={{ padding: \"5px\" }}>Export Excel</span>\n                </Button>\n                </>  \n            )}\n            <div\n            className=\"react_table--wrapper\"\n            style={{ marginTop: \"30px\"}}\n            >\n            <table {...getTableProps()}  \n            // ref={react_table} \n            id=\"react_table\"\n            >\n                <thead\n                // ref={tHeadRef}\n                >\n                 {headerGroups.map(headerGroup => (\n                     <tr {...headerGroup.getHeaderGroupProps()}>\n                     {headerGroup.headers.map(column => {\n                        // @ts-ignore\n                        return column.hideHeader === false ? null : (\n                         <th {...column.getHeaderProps()}>\n                           {column.render(\"Header\")}\n                         </th>\n                       );\n                     })}\n                   </tr>\n                ))}\n                </thead>\n                <tbody \n                // ref={tBodyRef} \n                {...getTableBodyProps()}\n                >\n                    <FixedSizeList\n                    height={400}\n                    itemCount={rows.length}\n                    itemSize={35}\n                    width={totalColumnsWidth+scrollBarSize}\n                    >\n                    {RenderRow}\n                    </FixedSizeList>\n                </tbody>\n            </table>\n            </div>\n        </>    \n    )\n  };\n  \nexport default NewTable;","import React, { useState } from \"react\";\n\nimport NewTable from \"./NewTable\";\n\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n\n  padding: 1rem;\n\n  .frozen {\n    background: #f5f5f5;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  .rt-th.frozen {\n    border-bottom: 1px solid #f8f8f8;\n  }\n\n  .table {\n    // display: inline-block;\n    // border-spacing: 0;\n    // border: 1px solid black;\n\n    .tr {\n      background-color: #FFFFFF;\n      :last-child {\n        .td {\n          // border-bottom: 0;\n        }\n      }\n    }\n\n    .th,\n    .td {\n      margin: 0;\n      padding: 0;\n      border: 1px solid #353535;\n      background-color: #FFFFFF;\n      :last-child {\n        border-right: 1px solid black;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0.5rem;\n        margin: 0;\n        border: 0;\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`\n\nexport interface PureTableProps {\n    Data?: Array<string>;\n    HeaderWell?: Array<string>;\n    HeadersLogs?: Array<string>;\n    hideHeader?: boolean;\n  }\n\nconst PureTable = (props: PureTableProps) => {\n\n    let arr = props.Data;\n    let nestedWell = props.HeaderWell;\n    console.log('nestedWell', nestedWell);\n    let Header = props.HeadersLogs;\n    console.log('Header',Header)\n    let cols = [];\n    let rows = [];\n  \n    \n    let columnsZero: {}[] = [];\n\n    cols.push({\n      // @ts-ignore\n      Header:  nestedWell[0].label,\n      hideHeader: props.hideHeader,\n      columns: []\n    })\n  \n    // console.log('cols before', cols);\n\n    // @ts-ignore\n    Header.forEach(function(item) {\n      let currentCol = {};\n       // @ts-ignore\n      currentCol['Header'] = item;\n      // @ts-ignore\n      currentCol['accessor'] = item;\n      if(item === 'MD'){\n        // @ts-ignore\n        currentCol['className'] = 'red';\n      }\n      columnsZero.push(currentCol);\n    });\n  \n     // @ts-ignore\n     cols[0]['columns'] = columnsZero;\n     console.log('cols', cols);\n     \n    // @ts-ignore \n    for (let i = 0; i < arr.length; i++) {\n        let row = i;\n        let currentRow2 = {};\n        cols.map((d, index) => {\n          d.columns.map((c, index) => {\n            // @ts-ignore\n            let valores = Number(arr[row][index]);\n            // @ts-ignore\n            currentRow2[`${c.accessor}`] = valores;\n          })\n        })\n        rows.push(currentRow2);\n        }\n\n    const [data, setData] = useState(rows)\n    const [originalData] = useState(data)\n\n      // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex: number, columnId: any, value: any) => {\n    // We also turn on the flag to not reset the page\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n    // Undo Table\n    function undoData(){\n        console.log(\"undo\");\n        // props.handleCurves();\n    };\n\n    // Save Table\n    function saveChanges(){\n        // console.log(\"saveChanges nestedHeaders\", this.props.nestedHeaders);\n\n        // let nested = this.props.nestedHeaders;\n        // console.log(\"nested\", nested);\n\n        // let wellHeaders = nested[0];\n        // let logHeaders = nested[1];\n        // let wellColumns = [];\n\n        // gets each column well header\n        // wellHeaders.forEach((header) => {\n        //   for (let i = 0; i < header.colspan; i++) {\n        //     wellColumns.push(header.label);\n        //   }\n        // });\n\n        // formatting json request for saving data in backend\n        let payload: any[] = [];\n\n        // for (let i = 0; i < logHeaders.length; i++) {\n        //   let column = i;\n        //   let well = wellColumns[column];\n        //   let log = logHeaders[column];\n\n        //   let wellData = payload.filter((wellData) => wellData.name === well)[0];\n        //   let data =\n        //     this.hotTableComponent.current.hotInstance.getDataAtCol(column);\n        //   if (wellData) {\n        //     if (!wellData.logs) {\n        //       wellData.logs = [{ name: log, values: data }];\n        //     } else {\n        //       wellData.logs.push({ name: log, values: data });\n        //     }\n        //   } else {\n        //     wellData = { well_name: well };\n        //     wellData.logs = [{ name: log, values: data }];\n        //     payload.push(wellData);\n        //   }\n        // }\n\n        console.log(\"data antes de salvar\", payload);\n\n        // let data = { data: payload };\n        // saveEditionData(data)\n        //   .then((well_errors) => {\n        //     if (well_errors.length === 0) {\n        //       setTimeout(\n        //         () =>\n        //           this.showToastr(\n        //             \"success\",\n        //             \"Changes were saved succesfully.\",\n        //             \"Success!\"\n        //           ),\n        //         300\n        //       );\n        //     } else {\n        //       let formatted_errors = well_errors.join(\", \");\n        //       console.log(well_errors);\n        //       setTimeout(\n        //         () =>\n        //           this.showToastr(\n        //             \"warning\",\n        //             `An error ocurred in following wells: ${formatted_errors}`,\n        //             \"Warning\"\n        //           ),\n        //         300\n        //       );\n        //     }\n        //   })\n        //   .catch((error) => {\n        //     setTimeout(\n        //       () =>\n        //         this.showToastr(\"error\", \"Error while saving changes.\", \"Error\"),\n        //       300\n        //     );\n        //   });\n    };\n\n    const resetData = () => setData(originalData);\n\n\n    return (\n        <>\n           <Styles>\n               <NewTable\n                 columns={cols}\n                 data={data}\n                //  updateMyData={updateMyData}\n                 resetData={resetData}\n                 exportExcel\n                 fileName=\"table\"\n                 undoData={undoData}\n                 saveChanges={saveChanges}\n               />\n           </Styles>\n        </>\n       );\n  };\n  \n  export default PureTable;","import React from \"react\";\n\nexport interface ButtonProps {\n  label: string;\n}\n\nconst Button = (props: ButtonProps) => {\n  return <button>{props.label}</button>;\n};\n\nexport default Button;","import React from \"react\";\n\nimport { TestComponentProps } from \"./TestComponent.types\";\n\nimport \"./TestComponent.css\";\n\nconst TestComponent: React.FC<TestComponentProps> = ({ heading, content }) => (\n  <div data-testid=\"test-component\" className=\"test-component\">\n    <h1 data-testid=\"test-component__heading\" className=\"heading\">\n      {heading}\n    </h1>\n    <div data-testid=\"test-component__content\">{content}</div>\n  </div>\n);\n\nexport default TestComponent;"],"names":["Button"],"mappings":"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"}